
usando while 
LISTA VI
1. Armazenar 10 números em um vetor NUMERO e imprimir uma listagem
numerada.

#include <stdio.h>

int main()
{
    int vetor [10];
    int cont = 0;
    while (cont < 10)
    {   
        
        
        printf("Digite o %d° número: ", cont + 1);
        scanf("%d",&vetor[cont]);
       
        cont+= 1;
    }
    
    cont = 0;
    while (cont < 10)
    {   

        printf("%d\n",vetor[cont] );
        cont+= 1;
    }
    
    
    return 0;
}
#################################################
2. Armazenar o salário de 20 pessoas. Calcular e armazenar o novo salário sabendo-se que o reajuste foi de 8%.
#include <stdio.h>

int main()
{
    int salario1 [20];
    int salario2 [20];
    int cont = 0;
    while (cont < 20)
        {   
        
        
        printf("Digite o salário da  %d° pessoa: ", cont + 1);
        scanf("%d",&salario1[cont]);
        salario2[cont] = (salario1[cont] * 0.08) + salario1[cont];
        cont+= 1;
        }
    cont = 0;
    while (cont < 20)
        {   
        printf("%d\n",salario2[cont]);
       
        cont+= 1;
        }
    
    return 0;
}
#################################################
3. Criar um algoritmo que leia dois conjuntos de números inteiros, tendo cada um 20
elementos e apresente os elementos comuns aos conjuntos.

#include <stdio.h>

int main()
{
    int conjunto1 [20];
    int conjunto2 [20];
    int cont = 0;
    while (cont < 20)
    {   
        
        
        printf("Digite o número para o 1° conjunto: ");
        scanf("%d",&conjunto1[cont]);
        printf("Digite o número para o 2° conjunto: ");
        scanf("%d",&conjunto2[cont]);    
        cont+= 1;
    }
    
   
    int j = 0;
    int i = 0;
    while (j <20){
        
        while (i < 20){
            if (conjunto1[j] == conjunto2[i]){
                 printf("Elemento comum: %d\n", conjunto1[j]);
                
            }
            i+= 1;
            j+= 1;
           
        }

        
    }   
    return 0;
}

#####################################################
4. Ler um vetor v de 10 elementos e obter um vetor w cujos componentes são os
quadrados dos respectivos componentes de v.

#include <stdio.h>
#include <math.h>

int main()
{
    int v [10];
    int w [10];
    int cont = 0;
    while (cont < 10)
    {   
        
        
        printf("Digite o %d° elemento: ", cont + 1);
        scanf("%d",&v[cont]);    
        cont+= 1;
    }
    
    cont = 0;
    while (cont < 10)
    {   
        
        w[cont] = pow (v[cont], 2);
        printf(" %d°\n", w[cont]);
        cont+= 1;
    }
  
    return 0;
}

#####################################################
5. Criar um algoritmo que leia um conjunto de 30 valores inteiros, armazene-os em
um vetor e escreva-os ao contrário da ordem de leitura.


#include <stdio.h>
#include <math.h>

int main()
{
    int vetor1 [3];
    int vetor2 [3];
    int cont = 0;
    int i = 0;
    while (cont < 3){   
        printf("Digite o %d° elemento: ", cont + 1);
        scanf("%d",&vetor1[cont]);
        cont+= 1;
    }
    
    
   
    for ( cont = 2; cont >= 0; cont--){
        vetor2[i] = vetor1[cont];
        i++;
    }
    
    for (int a = 0; a < 3; a++){
        printf("%d\n", vetor2[a]);
    }
    
    
    
    
    return 0;
}
#####################################################
LISTA VII:
1. Criar um algoritmo que leia os elementos de uma matriz inteira 10 X 10 e escreva 
os elementos da diagonal principal.
#include <stdio.h>


int main()
{
    int matriz [10][10];
    for ( int cont = 0; cont < 10; cont++){
        for (int i = 0; i < 10; i++){
            printf("Informe um número: ");
            scanf("%d", &matriz[cont][i]);
        }
    }
  
  
   
    for (int i = 0; i < 10; i++){
        printf("%d\n", matriz[i][i]);
       
    }
   
    
    
    return 0;
}

#####################################################
2. Criar um algoritmo que leia os elementos de uma matriz inteira 10 X 10 e escreva 
todos os elementos, exceto os elementos da diagonal principal.
#include <stdio.h>


int main()
{
    int matriz [10][10];
    for ( int cont = 0; cont < 10; cont++){
        for (int i = 0; i < 10; i++){
            printf("Informe um número: ");
            scanf("%d", &matriz[cont][i]);
        }
    }
  
  
   for ( int cont = 0; cont < 10; cont++){
        for (int i = 0; i < 10; i++){
            if(cont != i){
                printf("%d\n", matriz[cont][i]); 
            }
        }
    }
    
    return 0;
}

#####################################################
3. Criar um algoritmo que armazene dados em uma matriz de ordem 5 e imprima
toda a matriz.
int main()
{
    int matriz [5][5];
    for ( int cont = 0; cont < 5; cont++){
        for (int i = 0; i < 5; i++){
            printf("Informe um número: ");
            scanf("%d", &matriz[cont][i]);
        }
    }
  
  
   for ( int cont = 0; cont < 5; cont++){
        for (int i = 0; i < 5; i++){
            printf("%d\n", matriz[cont][i]); 
            
        }
    }
    
    return 0;
}

#####################################################
4. Entrar com valores para uma matriz 3 X 4. Gerar e imprimir uma matriz B que é o
triplo da matriz A


int main()
{
    int a [3][4];
    int b [3] [4];
    for ( int cont = 0; cont < 3; cont++){
        for (int i = 0; i < 4; i++){
            printf("Informe um número: ");
            scanf("%d", &matriz[cont][i]);
        }
    }
    
    for ( int cont = 0; cont < 3; cont++){
        for (int i = 0; i < 4; i++){
            b[cont][i] = 3*[cont][i];
        }
    }
  
    for ( int cont = 0; cont < 3; cont++){
        for (int i = 0; i < 4; i++){
            printf("%d\n", b[cont][i]);
            
        }
    }
  
    
    return 0;
}
#####################################################
5. Entrar com valores para uma matriz A 4 X 4 e para uma matriz B 4 X 4. Gerar e
imprimir a matriz soma 4 X 4.

#include <stdio.h>


int main()
{
    int a [4][4], b [4][4], soma[4][4];
    for ( int cont = 0; cont < 4; cont++){
        for (int i = 0; i < 4; i++){
            printf("Informe um número: ");
            scanf("%d", &a[cont][i]);
        }
    }
    
    for ( int cont = 0; cont < 4; cont++){
        for (int i = 0; i < 4; i++){
            printf("Informe um número: ");
            scanf("%d", &b[cont][i]);
        }
    }
    
    for ( int cont = 0; cont < 4; cont++){
        for (int i = 0; i < 4; i++){
            soma[cont][i] = a[cont][i]+ b[cont][i];
        }
    }
  
    for ( int cont = 0; cont < 4; cont++){
        for (int i = 0; i < 4; i++){
            printf("%d\n", soma[cont][i]);
            
        }
    }
  
    
    return 0;
}

#####################################################
LISTA VIII:

1. Um vendedor de automóveis armazena os seguintes dados de um veículo:
fabricante, modelo, ano, placa, cor, tipo de combustível (A é álcool e G é
gasolina), preço e valor do IPVA. Escreva a declaração de um registro para estes
dados.

#include <stdio.h>
#include <string.h>
#include <conio.h>

struct vendedor {
	char fabricante[25];
	char modelo[25];
	int ano;
	char placa[8];
	char cor[25];
	char tipoCombustivel;
	float preco;
	float valorIPVA;
	
};

int main()
{   
    int quantidade; 
    printf("Quantidade de veículos á cadastrar: ");
    scanf("%d",&quantidade);
    struct vendedor veiculo[quantidade]
    
    for (int i = 0; i < quantidade; i++){
        printf("Informe o nome do fabricante: ");
        scanf("%s",veiculo[i].fabricante);
       
        printf("Informe o modelo: ");
        scanf("%s",veiculo[i].modelo);
        
        printf("Informe o ano: ");
        scanf("%d", veiculo[i].ano);
        
        printf("Informe a placa: ");
        scanf("%s",veiculo[i].placa);
        
        printf("Informe a cor: ");
        scanf("%s",veiculo[i].placa);
        
        printf("Informe o tipo do combústivel: ");
        scanf("%s",veiculo[i].tipoCombustivel);
        
        printf("Informe o valor: ");
        scanf("%f",veiculo[i].preco);
        
        printf("Informe o valor do IPVA: ");
        scanf("%f",veiculo[i].valorIPVA);
        
        
    }
    
    for (int i = 0; i < quantidade; i++){
        	printf("%s\n", automovel[i].fabricante);
        
		printf("%s\n", automovel[i].modelo);
		
		printf("%d\n", automovel[i].ano);
		
		printf("%s\n", automovel[i].placa);
		
		printf("%s\n", automovel[i].cor);
		
		printf("%c\n", automovel[i].tipoCombustivel);
		
		printf("%f\n", automovel[i].preco);
		
		printf("%f\n", automovel[i].valorIPVA);
    }
    
    return 0;
}


#####################################################

2. Defina um registro para armazenar os seguintes dados de clientes de um banco:
nome do cliente, código da agência, data de nascimento (formato dd/mm/aaaa),
saldo atual e situação (cliente ‘V’IP ou ‘N’ORMAL).
#include <stdio.h>
#include <string.h>
#include <conio.h>

struct banco {
	char nomeCliente[45];
	int codigoAgencia;
	char dataNascimento [8];
	char situacao;
	float saldoAtual;

};

int main()
{   
    int quantidade; 
    printf("Quantidade de clientes à cadastrar: ");
    scanf("%d",&quantidade);
    struct banco cliente [quantidade]
    
    for (int i = 0; i < quantidade; i++){
        printf("Informe o nome do cliente: ");
        scanf("%s",cliente[i].nomeCliente);
       
        printf("Informe o codigo da agência: ");
        scanf("%d",cliente[i].codigoAgencia);
        
        printf("Informe a data de nascimento: ");
        scanf("%s", cliente[i].dataNascimento);
        
        printf("Informe se o cliente é V(vip) ou N(normal): ");
        scanf("%s",cliente[i].situacao);
        
        printf("Informe o saldo atual da conta: ");
        scanf("%f",cliente[i].saldoAtual);
        
        
    }
    
    for (int i = 0; i < quantidade; i++){
        printf("%s\n",cliente[i].nomeCliente);
        
		printf("%d\n",cliente[i].codigoAgencia);
		
		printf("%s\n", cliente[i].dataNascimento);
		
		printf("%s\n",cliente[i].situacao);
		
		printf("%f\n",cliente[i].saldoAtual);
		
		
    }
    
    return 0;
}


#####################################################

3. Num certo município, vários proprietários de imóveis estão com atraso com o
pagamento do IPTU. Faça um algoritmo para ler os dados do imóvel e imprimir o
valor do IPTU com a multa a ser paga, considerando os dados do imóvel: número
de cadastro, valor do imposto e quantidade de meses em atraso. A multa é de R$
10,00 por cada mês de atraso.
#include <stdio.h>
#include <string.h>
#include <conio.h>

struct imovel {
	
	int numeroCadastro;
	float valorImposto;
    int mesAtraso;
};

int main()
{   
    int quantidade; 
    printf("Quantidade de proprietários que estão com o IPTU com atraso para cadastrar: ");
    scanf("%d",&quantidade);
    struct imovel propietario [quantidade]
    
    for (int i = 0; i < quantidade; i++){
        printf("Informe o numero do cadastro: ");
        scanf("%d",propietario[i].numeroCadastro);
       
        printf("Informe o valor do imposto: ");
        scanf("%d",propietario[i].valorImposto);
        
        printf("Informe a quantidade de meses em atraso: ");
        scanf("%f", propietario[i].mesAtraso);
        
    }
    
    for (int i = 0; i < quantidade; i++){
        printf("%d\n",propietario[i].numeroCadastro);
        
		printf("%d\n",propietario[i].valorImposto);
		
		printf("%f\n",((propietario[i].mesAtraso) * 10.00));
		
		
		
    }
    
    return 0;
}



#####################################################
4. Numa viação, uma passagem de ônibus inclui os seguintes campos: número, 
código do local de partida, código do local de chegada, poltrona, tipo de assento (J 
– janela e C – corredor). Faça a definição do registro relativo a esta passagem.

struct Passagem {
    int numero;
    int cod_partida;
    int cod_chegada;
    int poltrona;
    char tipo_assento; 
};

int main(){
	struct Passagem minha_passagem;

	minha_passagem.numero = 1234;
	minha_passagem.cod_partida = 10;
	minha_passagem.cod_chegada = 20;
	minha_passagem.poltrona = 15;
	minha_passagem.tipo_assento = 'J';

return 0;
}
#####################################################
LISTA IX:

1. A fábrica de tecidos Bicho-da-Seda armazena as seguintes informações sobre 
cada tecido:
- código numérico
- descrição do tecido
- preço do metro
- quantidade em estoque (em metros)
Faça um algoritmo que leia um lote de 30 tecidos, e depois imprima:
a) Um relatório contendo as informações de cada tecido.
b) Um relatório dos tecidos com estoque inferior a 50 metros.
c) Um relatório dos tecidos com preço inferior a R$ 0,60 o metro.

#include <stdio.h>

struct Tecido {
    int codigo;
    char descricao[50];
    float preco;
    int estoque;
};

int main() {
    struct Tecido tecidos[30];
    int i;

   
    for(i=0; i<30; i++) {
        printf("\nTecido %d:\n", i+1);
        printf("Código: ");
        scanf("%d", &tecidos[i].codigo);
        printf("Descrição: ");
        scanf(" %[^\n]", tecidos[i].descricao);
        printf("Preço: ");
        scanf("%f", &tecidos[i].preco);
        printf("Estoque: ");
        scanf("%d", &tecidos[i].estoque);
    }

  
    printf("\nRELATÓRIO DE TECIDOS\n");
    printf("Código | Descrição                 | Preço (R$/m) | Estoque (m)\n");
    for(i=0; i<30; i++) {
        printf("%6d | %-25s | %10.2f | %10d\n", tecidos[i].codigo, tecidos[i].descricao, tecidos[i].preco, tecidos[i].estoque);
    }

   
    printf("\nRELATÓRIO DE TECIDOS COM ESTOQUE INFERIOR A 50 METROS\n");
    printf("Código | Descrição                 | Preço (R$/m) | Estoque (m)\n");
    for(i=0; i<30; i++) {
        if(tecidos[i].estoque < 50) {
            printf("%6d | %-25s | %10.2f | %10d\n", tecidos[i].codigo, tecidos[i].descricao, tecidos[i].preco, tecidos[i].estoque);
        }
    }

    
    printf("\nRELATÓRIO DE TECIDOS COM PREÇO INFERIOR A R$ 0,60 O METRO\n");
    printf("Código | Descrição                 | Preço (R$/m) | Estoque (m)\n");
    for(i=0; i<30; i++) {
        if(tecidos[i].preco < 0.6) {
            printf("%6d | %-25s | %10.2f | %10d\n", tecidos[i].codigo, tecidos[i].descricao, tecidos[i].preco, tecidos[i].estoque);
        }
    }

    return 0;
}

#####################################################


